### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Comment {
  author: User!
  createdAt: DateTime!
  id: String!
  post: Post!
  postId: String!
  text: String!
  updatedAt: DateTime!
  userId: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  text: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  author: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  post: PostWhereInput
  postId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input CommentWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Like {
  active: Boolean!
  author: User!
  createdAt: DateTime!
  post: Post!
  postId: String!
  updatedAt: DateTime!
  userId: String!
}

input LikeListRelationFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

input LikeOrderByInput {
  active: SortOrder
  createdAt: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input LikeUserIdPostIdCompoundUniqueInput {
  postId: String!
  userId: String!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  active: BoolFilter
  author: UserWhereInput
  createdAt: DateTimeFilter
  post: PostWhereInput
  postId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input LikeWhereUniqueInput {
  userId_postId: LikeUserIdPostIdCompoundUniqueInput
}

type Mutation {
  changePassword(confirmPassword: String!, newPassword: String!, token: String!): User
  createComment(postId: String!, text: String!): Comment
  createPost(body: String!, images: [String!]!, published: Boolean!, title: String!): Post
  createUser(confirmPassword: String!, email: String!, name: String!, password: String!): User
  deleteComment(id: String!): Comment
  deletePost(id: String!): Post
  deleteUser(password: String): User
  follow(userId: String!): User
  forgotPassword(email: String!): Boolean
  likePost(postId: String!): Like
  loginUser(email: String!, password: String!): User
  logoutUser: Boolean
  markAsRead(notificationId: String!): Notification
  markAsSeen(notificationsIds: [String!]!): Boolean
  unfollow(userId: String!): User
  updateComment(updateText: String!, whereId: String!): Comment
  updatePost(updateBody: String, updatePublished: Boolean, updateTitle: String, whereId: String!): Post
  updateUser(confirmNewPassword: String, password: String, updateEmail: String, updateName: String, updatePassword: String, updatePhoto: String): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  createdAt: DateTime!
  dispatcher: User!
  dispatcherId: String!
  id: String!
  link: String!
  message: String!
  read: Boolean!
  receiver: User!
  receiverId: String!
  seen: Boolean!
  updatedAt: DateTime!
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

input NotificationOrderByInput {
  createdAt: SortOrder
  dispatcherId: SortOrder
  id: SortOrder
  link: SortOrder
  message: SortOrder
  read: SortOrder
  receiverId: SortOrder
  seen: SortOrder
  updatedAt: SortOrder
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  createdAt: DateTimeFilter
  dispatcher: UserWhereInput
  dispatcherId: StringFilter
  id: StringFilter
  link: StringFilter
  message: StringFilter
  read: BoolFilter
  receiver: UserWhereInput
  receiverId: StringFilter
  seen: BoolFilter
  updatedAt: DateTimeFilter
}

input NotificationWhereUniqueInput {
  id: String
}

type Post {
  author: User!
  body: String!
  commentCount: Int
  comments(cursor: CommentWhereUniqueInput, skip: Int, take: Int): [Comment!]!
  createdAt: DateTime!
  id: String!
  images: [String!]!
  likeCount: Int
  likes(cursor: LikeWhereUniqueInput, skip: Int, take: Int): [Like!]!
  published: Boolean!
  textSnippet: String
  title: String!
  updatedAt: DateTime!
  userId: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  images: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserWhereInput
  body: StringFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  images: StringNullableListFilter
  likes: LikeListRelationFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  commentCount: Int
  comments(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  like(where: LikeWhereUniqueInput!): Like
  likeCount: Int
  likes(cursor: LikeWhereUniqueInput, orderBy: [LikeOrderByInput!], skip: Int, take: Int, where: LikeWhereInput): [Like!]!
  me: User
  myNotifications: [Notification]
  myPosts(skip: Int!, take: Int!): [Post]!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(cursor: NotificationWhereUniqueInput, orderBy: [NotificationOrderByInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  post(where: PostWhereUniqueInput!): Post
  postCount: Int
  posts(cursor: PostWhereUniqueInput, orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  userCount: Int
  users(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscription {
  commentSub(commentId: ID!): commentSubResponse
  commentSubByPost(postId: ID!): commentSubResponse
  commentSubByUser(userId: ID!): commentSubResponse
  myPostSub: postSubResponse
  postSub(postId: String!): postSubResponse
  postSubByUser(userId: String!): postSubResponse
  userSub(userId: ID!): userSubResponse
}

type User {
  IFollow: Boolean
  cloudinaryPhoto: Boolean
  comments(cursor: CommentWhereUniqueInput, skip: Int, take: Int): [Comment!]!
  createdAt: DateTime!
  email: String!
  facebookId: String
  followers(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  followersCount: Int
  following(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  followingCount: Int
  followsMe: Boolean
  googleId: String
  id: String!
  likes(cursor: LikeWhereUniqueInput, skip: Int, take: Int): [Like!]!
  myNotification(cursor: NotificationWhereUniqueInput, skip: Int, take: Int): [Notification!]!
  name: String!

  """Only logged in user can query it but its hashed anyway"""
  password: String
  photo: String
  posts(cursor: PostWhereUniqueInput, skip: Int, take: Int): [Post!]!
  sentNotification(cursor: NotificationWhereUniqueInput, skip: Int, take: Int): [Notification!]!
  updatedAt: DateTime!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  cloudinaryPhoto: SortOrder
  createdAt: SortOrder
  email: SortOrder
  facebookId: SortOrder
  googleId: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  photo: SortOrder
  updatedAt: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  cloudinaryPhoto: BoolNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  facebookId: StringNullableFilter
  followers: UserListRelationFilter
  following: UserListRelationFilter
  googleId: StringNullableFilter
  id: StringFilter
  likes: LikeListRelationFilter
  myNotification: NotificationListRelationFilter
  name: StringFilter
  password: StringNullableFilter
  photo: StringNullableFilter
  posts: PostListRelationFilter
  sentNotification: NotificationListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  facebookId: String
  googleId: String
  id: String
}

type commentSubResponse {
  data: Comment
  mutation: String
}

type postSubResponse {
  data: Post
  mutation: String
}

type userSubResponse {
  data: User
  mutation: String
}
