### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  author: User
  id: String
  post: Post
  postId: String
  text: String
  userId: String
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  id: SortOrder
  postId: SortOrder
  text: SortOrder
  userId: SortOrder
}

type commentSubResponse {
  data: Comment
  mutation: String
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  id: StringFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  post: PostWhereInput
  postId: StringFilter
  text: StringFilter
  userId: StringFilter
}

input CommentWhereUniqueInput {
  id: String
}

type Mutation {
  createComment(postId: String!, text: String!): Comment
  createPost(body: String!, published: Boolean!, title: String!): Post
  createUser(email: String!, name: String!, password: String!): AuthPayload
  deleteComment(id: String!): Comment
  deletePost(id: String!): Post
  deleteUser(password: String!): User
  loginUser(email: String!, password: String!): AuthPayload
  updateComment(updateText: String!, whereId: String!): Comment
  updatePost(updateBody: String, updatePublished: Boolean, updateTitle: String, whereId: String!): Post
  updateUser(confirmNewPassword: String, password: String!, updateEmail: String, updateName: String, updatePassword: String): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  author: User
  body: String
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  id: String
  published: Boolean
  title: String
  userId: String
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  body: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  userId: SortOrder
}

type postSubResponse {
  data: Post
  mutation: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  body: StringFilter
  comments: CommentListRelationFilter
  id: StringFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BoolFilter
  title: StringFilter
  userId: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  commentCount: Int
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int, orderBy: [CommentOrderByInput!], where: CommentWhereInput): [Comment!]!
  me: User
  post(where: PostWhereUniqueInput!): Post
  postCount: Int
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  userCount: Int
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  commentSub(commentId: ID!): commentSubResponse
  commentSubByPost(postId: ID!): commentSubResponse
  commentSubByUser(userId: ID!): commentSubResponse
  postSub(postId: ID!): postSubResponse
  postSubByUser(userId: ID!): postSubResponse
  userSub(userId: ID!): userSubResponse
}

type User {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  email: String
  id: String
  name: String

  """Only logged in user can query it but its hashed anyway"""
  password: String
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
}

input UserOrderByInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

type userSubResponse {
  data: User
  mutation: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  comments: CommentListRelationFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
