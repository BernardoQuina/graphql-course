// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String         @id @default(uuid())
  name             String
  password         String?
  email            String         @unique
  googleId         String?        @unique
  facebookId       String?        @unique
  photo            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  followers        User[]         @relation("UserFollows", references: [id])
  following        User[]         @relation("UserFollows", references: [id])
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  myNotification   Notification[] @relation("receiver")
  sentNotification Notification[] @relation("dispatcher")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  body      String
  images    String[]
  published Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Like {
  active    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@id([userId, postId])
}

model Notification {
  id           String   @id @default(uuid())
  receiver     User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId   String
  dispatcher   User     @relation("dispatcher", fields: [dispatcherId], references: [id])
  dispatcherId String
  seen         Boolean  @default(false)
  read         Boolean  @default(false)
  message      String
  link         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
